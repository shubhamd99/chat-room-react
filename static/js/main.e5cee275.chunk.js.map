{"version":3,"sources":["config.js","logo1.png","logo.png","components/Message.js","components/MessageList.js","components/SendMessageForm.js","components/RoomList.js","components/NewRoomForm.js","App.js","serviceWorker.js","index.js"],"names":["exports","tokenUrl","instanceLocator","module","__webpack_require__","p","Message","props","react_default","a","createElement","className","username","text","MessageList","node","ReactDOM","findDOMNode","this","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","roomId","messages","map","message","index","components_Message","key","senderId","src","Logo","style","width","paddingLeft","paddingBottom","alt","React","Component","SendMessageForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","target","value","handleSubmit","preventDefault","sendMessage","state","bind","assertThisInitialized","onSubmit","disabled","onChange","placeholder","type","RoomList","orderedRooms","toConsumableArray","rooms","sort","b","id","color","room","active","onClick","subscribeToRoom","href","name","NewRoomForm","roomName","createRoom","required","App","getRooms","currentUser","getJoinableRooms","then","joinableRooms","joinedRooms","catch","err","console","log","hooks","onMessage","concat","_this2","Chatkit","ChatManager","userId","tokenProvider","TokenProvider","url","connect","_this$state","components_RoomList","components_MessageList","components_SendMessageForm","components_NewRoomForm","Boolean","window","location","hostname","match","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5cee275.chunk.js","sourcesContent":["const tokenUrl = \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/144b279b-5b59-475c-893b-c15937b2acde/token\";\r\nconst instanceLocator = \"v1:us1:144b279b-5b59-475c-893b-c15937b2acde\";\r\n\r\nexports.tokenUrl = tokenUrl;\r\nexports.instanceLocator = instanceLocator;\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/logo1.19610d7b.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.ca7f2d13.png\";","import React from 'react'\r\n\r\nconst Message = ( props ) => (\r\n        <div className=\"message\">\r\n            <div className='message-username'>{props.username}</div>\r\n            <div className='message-text'>{props.text}</div>\r\n        </div>\r\n\r\n)\r\n\r\n\r\nexport default Message","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Message from './Message'\r\n\r\nimport Logo from '../logo1.png'\r\n\r\nclass MessageList extends React.Component {\r\n\r\n    componentWillUpdate(){\r\n        // when i'm scrolling and seeing old messages and then new message came so it doesn't go down\r\n        const node = ReactDOM.findDOMNode(this)\r\n        this.shouldScrollToBottom = node.scrollTop + node.clientHeight + 100 >= node.scrollHeight\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        // Automatically scrolls down to bottom when new message arrives\r\n        if (this.shouldScrollToBottom){\r\n            const node = ReactDOM.findDOMNode(this)\r\n            node.scrollTop = node.scrollHeight\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.roomId) {\r\n            return (\r\n                <div className=\"message-list\">\r\n                    <div className=\"join-room\">\r\n                    <div className=\"join-room-logo\">\r\n                        <img src={Logo} style={{ width: '120px', paddingLeft: '5px',  paddingBottom: '5px' }} alt=\"logo\" />\r\n                        <div>&larr; Join a room!</div>\r\n                   </div> \r\n                   </div>  \r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div className=\"message-list\">\r\n            {\r\n                this.props.messages.map((message, index) => {\r\n                    return (\r\n                        <Message key={index} username={message.senderId} text={message.text} />\r\n                    )\r\n                })\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageList","import React from 'react'\r\n\r\nclass SendMessageForm extends React.Component {\r\n\r\n    constructor(props) {\r\n      super(props)\r\n    \r\n      this.state = {\r\n         message: ''\r\n      }\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    \r\n    handleChange = (e) => {\r\n        this.setState({\r\n            message: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        //console.log(this.state.message)\r\n        this.props.sendMessage(this.state.message) // Inverse data flow\r\n        this.setState({\r\n            message: ''  // clear the input after pressing enter\r\n        })\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.state.message);\r\n        return (\r\n            <form className=\"send-message-form\" onSubmit={this.handleSubmit}>\r\n                <input\r\n                    disabled={this.props.disabled}\r\n                    onChange={this.handleChange}\r\n                    value={this.state.message}\r\n                    placeholder=\"Type your messages\"\r\n                    type=\"text\" />\r\n                <button type=\"submit\" className='button-message' disabled={this.props.disabled}>Submit</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SendMessageForm","import React from 'react'\r\n\r\nimport Logo from '../logo.png'\r\n\r\nclass RoomList extends React.Component {\r\n    render () {\r\n        // console.log(this.props.rooms)\r\n        const orderedRooms = [...this.props.rooms].sort((a,b) => a.id - b.id)\r\n        return (\r\n            <div className=\"rooms-list\">\r\n            <ul>\r\n                <img src={Logo} style={{ width: '120px', paddingLeft: '5px',  paddingBottom: '5px' }} alt=\"logo\" />\r\n                <h3 style={{ color: '#D9D9D9' }}>Your Rooms:</h3>\r\n                {\r\n                    orderedRooms.map(room => {\r\n                        const active = this.props.roomId === room.id ? \"active\" : \"\";\r\n                        return (\r\n                            <li key={room.id} className={\"room \" + active }>\r\n                                <a onClick={ () => this.props.subscribeToRoom(room.id) } href=\"#\"># {room.name}</a>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n              </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RoomList","import React from 'react'\r\n\r\nclass NewRoomForm extends React.Component {\r\n\r\n    constructor(props) {\r\n      super(props)\r\n    \r\n      this.state = {\r\n         roomName: ''\r\n      }\r\n      this.handleChange = this.handleChange.bind(this)\r\n      this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n    \r\n\r\n    handleChange(e) {\r\n        this.setState({\r\n            roomName: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault()\r\n        this.props.createRoom(this.state.roomName) // Inverse data flow\r\n        this.setState({\r\n            roomName: ''\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"new-room-form\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        value={this.state.roomName}\r\n                        onChange={this.handleChange}\r\n                        type=\"text\" \r\n                        placeholder=\"Create a Room\" \r\n                        required />\r\n                    <button id=\"create-room-btn\" type=\"submit\">+</button>\r\n            </form>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewRoomForm","import React from 'react'\nimport Chatkit from '@pusher/chatkit-client'\nimport MessageList from './components/MessageList'\nimport SendMessageForm from './components/SendMessageForm'\nimport RoomList from './components/RoomList'\nimport NewRoomForm from './components/NewRoomForm'\n\nimport { tokenUrl, instanceLocator } from './config'\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      roomId: null,\n      messages: [],\n      joinableRooms: [],\n      joinedRooms: []\n    }\n    this.sendMessage = this.sendMessage.bind(this)\n    this.subscribeToRoom = this.subscribeToRoom.bind(this)\n    this.getRooms = this.getRooms.bind(this)\n    this.createRoom = this.createRoom.bind(this)\n  }\n  \n  componentDidMount(){\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator,\n      userId: 'rockd',\n      tokenProvider: new Chatkit.TokenProvider({\n        url: tokenUrl\n      })\n    })\n\n    chatManager.connect()\n    .then(currentUser => {\n      this.currentUser = currentUser\n      this.getRooms()\n    })\n    .catch(err => console.log('error on connecting', err))\n  }\n\n\n  getRooms = () => {\n    this.currentUser.getJoinableRooms()\n    .then(joinableRooms => {\n       this.setState({\n         joinableRooms,\n         joinedRooms: this.currentUser.rooms\n       })\n    })\n    .catch(err => console.log('error on joinableRooms',err))\n  }\n\n\n  subscribeToRoom = (roomId) => {\n    this.setState({ messages: [] }) // sets the messages to empty array when user click on another room\n    this.currentUser.subscribeToRoom({\n      roomId: roomId,\n      hooks: {\n        onMessage: message => {\n          this.setState({\n             messages: [...this.state.messages, message] // Add the message to the end of the array\n          })\n        }\n      }\n    })\n    .then(room => {\n      this.setState({\n        roomId: room.id // keep track of room id\n      })\n       this.getRooms()  // keeping tracks of the updated joined and joinable rooms\n    })\n    .catch(err => console.log('Error on subscribing room', err))\n  }\n\n  // Inverse data flow ( from SendMessageForm(child) to sendMessage(parent) )\n  sendMessage = (text) => {\n    this.currentUser.sendMessage({\n      text,\n      roomId: this.state.roomId\n    })\n    \n  }\n\n  createRoom = (name) => {\n    //console.log('Room Name: ', name)\n    this.currentUser.createRoom({\n       name\n    })\n    .then(room => this.subscribeToRoom(room.id))\n    .catch(err => console.log('Error in creating Room ', err))\n  }\n\n    render() {\n      const { joinableRooms, joinedRooms } = this.state\n      // console.log('message :', this.state.messages);\n        return (\n            <div className=\"app\">\n                <RoomList \n                  roomId={this.state.roomId}\n                  subscribeToRoom={this.subscribeToRoom} \n                  rooms={[...joinableRooms, ...joinedRooms]} \n                />\n                <MessageList messages={this.state.messages} roomId={this.state.roomId} />\n                <SendMessageForm disabled={!this.state.roomId} sendMessage={this.sendMessage} />\n                <NewRoomForm createRoom={this.createRoom} />\n            </div>\n        );\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}